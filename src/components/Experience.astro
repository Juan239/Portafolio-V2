---
type Experiencia = {
  id: string;
  data: {
    fecha_inicio: string;
    fecha_termino?: string;
    cargo: string;
    empresa: string;
    lugar: string;
    // agrega otros campos si es necesario
  };
  render: () => Promise<{ Content: any }>;
};

const { experiencias } = Astro.props;

// Procesar render() de cada entrada
const experienciasRenderizadas = await Promise.all(
  (experiencias as Experiencia[]).map(async (exp: Experiencia) => {
    const rendered = await exp.render();
    return {
      id: exp.id,
      data: exp.data,
      Content: rendered.Content,
    };
  })
);
---

<div class="py-6 px-2 lg:px-0">
  <h2 class="text-4xl lg:text-6xl font-bold text-light-primario dark:text-dark-primario">Experiencia laboral</h2>

  {experienciasRenderizadas.map(({ id, data, Content }) => (
    <div class="flex flex-col md:flex-row  mt-3 items-start">
      <div class="flex flex-col w-full lg:w-1/3">
        <p class="text-[12px] lg:text-base">{data.fecha_inicio} - {data.fecha_termino ?? "Actualidad"}</p>
      </div>
      <div class="flex flex-col w-full lg:w-2/3 ">
        <h3 class="text-xl font-semibold">{data.cargo}</h3>
        <p class="text-light-secundario text-[14px] lg:text-base dark:text-dark-secundario">{data.empresa}, {data.lugar}</p>
       <div class="mt-2 prose text-[12px] lg:text-base text-light-primario dark:text-dark-primario prose-strong:text-light-primario dark:prose-strong:text-dark-primario">
        <Content />
      </div>
      </div>
    </div>
  ))}
</div>
